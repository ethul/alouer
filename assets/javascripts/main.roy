
data Maybe a = Nothing | Just a

let maybeMonad = {
  return: \a -> Just a
  bind: \ma f -> match ma
    case Nothing = Nothing ()
    case (Just a) = f a
}

let deferredMonad = {
  return: $.when
  bind: \ma f ->
    let defer = $.Deferred ()
    ma.done (\a -> (f a).done defer.resolve)
    defer.promise ()
}

let liftDeferred f =
  let defer = $.Deferred ()
  f defer
  defer.promise ()

($ document).ready (\() ->
  let map = (new GMaps) {
    div: "#map"
    lat: 45.4214
    lng: -75.6919
    width: (($ window).width ()) ++ "px"
    height: (($ window).height ()) ++ "px"
  }

  let drawing = (new google.maps.drawing.DrawingManager) {
    drawingControlOptions: {
      drawingModes: [google.maps.drawing.OverlayType.POLYGON]
    }
    polygonOptions: {
      fillColor: "red"
      fillOpacity: 0.25
      strokeWeight: 1
      clickable: false
      editable: true
    }
  }

  let handler path =
    path.forEach (\a ->
      console.log (a.toString ())
    )

  google.maps.event.addListener drawing "polygoncomplete" (\polygon ->
    let path = polygon.getPath ()
    google.maps.event.addListener path "set_at" (\() -> handler path)
    google.maps.event.addListener path "insert_at" (\() -> handler path)
    google.maps.event.addListener path "remove_at" (\() -> handler path)
    handler path
  )

  drawing.setMap map.map
)

($ document).ready (\() ->
  let res = do deferredMonad
    apts <- $.get "/apartments"
    console.log apts
    return apts

  res
)
